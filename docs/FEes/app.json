[{"name": "app.py", "content": "import shinyswatch\nfrom shiny import App, Inputs, Outputs, Session, render, ui\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny import App, render, ui\nimport textwrap\n\napp_ui = ui.page_fluid(\n    # Available themes:\n    #  cerulean, cosmo, cyborg, darkly, flatly, journal, litera, lumen, lux,\n    #  materia, minty, morph, pulse, quartz, sandstone, simplex, sketchy, slate,\n    #  solar, spacelab, superhero, united, vapor, yeti, zephyr\n    shinyswatch.theme.superhero(),\n\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_text(\"name\", \"\", placeholder=\"Nombre\"),\n                ui.input_text(\"date\", \"\", placeholder=\"Fecha\"),\n                ui.input_slider(\"FE1\", \"Acci\u00f3n\", 0, 7, 2, step=0.1, ticks=False),\n                ui.input_slider(\"FE2\", \"Enfoque\", 0, 7, 2, step=0.1, ticks=False),\n                ui.input_slider(\"FE3\", \"Esfuerzo sostenido\", 0, 7, 2, step=0.1, ticks=False),\n                ui.input_slider(\"FE4\", \"Emoci\u00f3n\", 0, 7, 2, step=0.1, ticks=False),\n                ui.input_slider(\"FE5\", \"Memoria de trabajo\", 0, 7, 2, step=0.1, ticks=False),\n                ui.input_slider(\"FE6\", \"Acci\u00f3n/tiempo\", 0, 7, 2, step=0.1, ticks=False),\n            ),\n            ui.panel_main(\n                ui.tags.h2(\"Rueda de las Funciones Ejecutivas\"),\n                ui.output_text_verbatim(\"name\"),\n                ui.output_text_verbatim(\"date\"),\n                ui.output_plot(\"plot\"),\n                ui.tags.h5(\"Desarrollado por Marcos Espinel\"),\n                ui.tags.h6(\"med11.coaching@gmail.com\"),\n            ),\n        ),\n    \n)\n\n\ndef server(input, output, session):\n\n    @output\n    @render.text\n    def name():\n        return f'{input.name()}'\n\n    @output\n    @render.text\n    def date():\n        return f'{input.date()}'\n\n    \n    @output\n    @render.plot(alt=\"A plot\")\n    def plot():\n        # Datos\n        x = [\"Activaci\u00f3n\",\n     \"Enfoque\",\n     \"Esfuerzo sostenido\",\n     \"Emoci\u00f3n\",\n     \"Memoria de trabajo\",\n     \"Acci\u00f3n/tiempo\"]\n        y = [input.FE1(), input.FE2(), input.FE3(),\n             input.FE4(), input.FE5(), input.FE6()]\n        \n        # Colores de las barras\n        colors = ['#F9837B', '#BEA819', '#19C14C', '#19C5CA', '#70A6FF', '#F673E6']\n        \n        # Crear la figura y los ejes en coordenadas polares\n        fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\n        \n        # Convertir los valores de x a radianes\n        theta = np.linspace(0, 2 * np.pi, len(x), endpoint=False)\n        \n        # Calcular el ancho de las barras\n        width = 2 * np.pi / len(x)\n        \n        # Crear el gr\u00e1fico de barras en coordenadas polares con colores personalizados\n        bars = ax.bar(theta, y, width=width, color=colors)\n        \n        # Configurar las etiquetas del eje radial\n        ax.set_xticks(theta)\n        \n        # Dividir las etiquetas en m\u00faltiples l\u00edneas utilizando textwrap.wrap()\n        wrapped_labels = [textwrap.wrap(label, 10) for label in x]\n        # Unir las l\u00edneas con saltos de l\u00ednea para mostrarlas en el gr\u00e1fico\n        wrapped_labels = ['\\n'.join(lines) for lines in wrapped_labels]\n        \n        ax.set_xticklabels(wrapped_labels)\n        \n        # Mostrar la cuadr\u00edcula\n        ax.yaxis.grid(True)\n        ax.xaxis.grid(False)  # Ocultar las l\u00edneas de la cuadr\u00edcula del eje x\n        \n        # Ajustar el orden de dibujado de los elementos\n        ax.set_axisbelow(True)\n        \n        # Ocultar los n\u00fameros del eje y\n        ax.set_yticklabels([])\n        \n        # Ocultar la l\u00ednea negra entre el gr\u00e1fico y las etiquetas del eje x\n        ax.spines['polar'].set_visible(False)\n        \n        # Crear la leyenda de colores con los nombres de las categor\u00edas y ajustar su posici\u00f3n\n        legend_labels = [plt.Rectangle((0, 0), 1, 1, color=color) for color in colors]\n        ax.legend(legend_labels, x, bbox_to_anchor=(1.05, 1), loc='upper left')\n        \n        # Calcular las coordenadas polares para la l\u00ednea circular\n        theta_line = np.linspace(0, 2 * np.pi, 100)\n        r_line = np.ones_like(theta_line) * 5\n        \n        # Trazar la l\u00ednea circular\n        ax.plot(theta_line, r_line, color='black', linestyle='--', linewidth=1)\n        \n        # Establecer el rango fijo en el eje y\n        ax.set_ylim(0, 7)\n        \n        # Redibujar la figura para rotar las etiquetas alrededor del gr\u00e1fico\n        plt.gcf().canvas.draw()\n        \n        # Obtener los \u00e1ngulos de las etiquetas del eje angular en grados\n        angles = np.rad2deg(theta)\n        \n        # Almacenar las etiquetas originales del eje angular\n        labels = []\n        \n        # Vector de \u00e1ngulos de rotaci\u00f3n personalizados\n        custom_angles = [0, 0, 0, 0, 0, 0]\n        \n        # Rotar las etiquetas seg\u00fan los \u00e1ngulos personalizados\n        for label, angle in zip(ax.get_xticklabels(), custom_angles):\n            x, y = label.get_position()\n            lab = ax.text(x, y - 0.15, label.get_text(), transform=label.get_transform(),\n                          ha=label.get_ha(), va=label.get_va())\n            lab.set_rotation(angle)\n            labels.append(lab)\n        \n        # Ocultar las etiquetas originales del eje angular\n        ax.set_xticklabels([])\n\n\n\napp = App(app_ui, server, debug=True)", "type": "text"}, {"name": "requirements.txt", "content": "shinyswatch\n", "type": "text"}]